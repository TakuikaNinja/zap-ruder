#
# Linker script for single-sided FDS games
# Copyright 2025 TakuikaNinja, based on Damian Yerrick's nrom128.cfg
#
# Copying and distribution of this file, with or without
# modification, are permitted in any medium without royalty
# provided the copyright notice and this notice are preserved.
# This file is offered as-is, without any warranty.
#
MEMORY {
  ZP:     start = $10, size = $f0, type = rw;
  RAM:    start = $0300, size = $0500, type = rw, file = "";
  
  # one side of an fwNES format FDS disk image holds 65500 bytes (excluding the useless header)
  SIDE1A: start = $0000, size = 65500, type = ro, file = %O, fill = yes, fillval = 0;
  
  ROM7:    start = $8000, size = $4000, type = rw, file = "";
  VEC:     start = $DFF6, size = $000A, type = rw, file = "";
  CHRROM:  start = $0000, size = $2000, type = rw, file = %O;
  
  # used for the license screen bypass
  BYPASS: start = $0200, size = $0100, type = rw, file = "";
  CHK:    start = $2000, size = $0001, type = rw, file = "";
}

SEGMENTS {
  ZEROPAGE: load = ZP, type = zp;
  BSS:      load = RAM, type = bss, define = yes, align = $100;
  
  SIDE1A:   load = SIDE1A, type = ro;
  # disk file data segments need 'define = yes' set to be able to export special symbols:
  # __NAME_LOAD__ __NAME_RUN__ __NAME_SIZE__
  # these symbols make it much easier to define file header blocks
  PRG_HDR:  load = SIDE1A, type = ro;
  PRG:  load = SIDE1A, run = ROM7, type = ro, define = yes;
  
  VEC_HDR:  load = SIDE1A, type = ro;
  VECTORS:  load = SIDE1A, run = VEC, type = ro, define = yes;
  
  CHR_HDR:  load = SIDE1A, type = ro;
  CHR:      load = SIDE1A, run = CHRROM, define = yes;
  
  BYP_HDR:  load = SIDE1A, type = ro;
  BYPASS:   load = SIDE1A, run = BYPASS, define = yes;
  
  CHK_HDR:  load = SIDE1A, type = ro;
  CHK:      load = SIDE1A, run = CHK, define = yes;
}
